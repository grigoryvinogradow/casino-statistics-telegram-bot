# Data

API_TOKEN = '7753797090:AAHRQZ1EfxkNNwtd_VCslNV8HoxbUi3pLnI'
USERDATA = 'userdata.json'
LOGGING_ENABLED = True

import json, os, time, logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.types import ContentType

def loadJSON(filename):
    try:
        with open(filename, 'r') as file:
            data = json.load(file)
            return data
    except Exception as e:
        print(f"Error with loading JSON: {str(e)}")
        return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def saveJSON(data, filename, indent=4):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, sort_keys=True, allow_nan=True, indent=indent)
    except Exception as e:
        print(f"Error with saving JSON: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users
if not os.path.exists(USERDATA):
    saveJSON({}, USERDATA)  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
users = loadJSON(USERDATA)

for user in users:
    print(f"Loaded {user} statistics...")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging_middleware = LoggingMiddleware()
dp.middleware.setup(logging_middleware)

logging.basicConfig(filename='logging.log', level=logging.INFO, format='%(asctime)s - %(message)s')

class UserRegistrationMiddleware(BaseMiddleware):
    async def on_pre_process_message(self, message: types.Message, data: dict):
        username = message.from_user.username
        if username and username not in users:
            users[username] = {
                "tries": {
                    "slots": 0,
                    "dice": 0,
                    "dart": 0,
                    "bask": 0,
                    "foot": 0,
                    "bowl": 0
                },
                "wins": {
                    "slots": 0,
                    "dice": 0,
                    "dart": 0,
                    "bask": 0,
                    "foot": 0,
                    "bowl": 0
                },
                "jackpots": {
                    "slots": 0
                },
                "congratulate": True
            }
            saveJSON(users, USERDATA)
            print(f'New user: {username}')

        elif not username:
            await message.bot.send_message(
                message.chat.id,
                f'‚ùó *–û–®–ò–ë–ö–ê*\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ username. *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞*',
                parse_mode="Markdown",
                message_thread_id=message.message_thread_id
            )

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp.middleware.setup(UserRegistrationMiddleware())

@dp.message_handler(commands=['casino'])
async def main_menu(message: types.Message):
    username = message.from_user.username

    wins = users.get(username, {}).get("wins", {})
    tries = users.get(username, {}).get("tries", {})
    jackpots = users.get(username, {}).get("jackpots", {}).get("slots", 0)

    slots_wins = wins.get("slots", 0)
    dice_wins = wins.get("dice", 0)
    foot_wins = wins.get("foot", 0)
    bowl_wins = wins.get("bowl", 0)
    bask_wins = wins.get("bask", 0)
    dart_wins = wins.get("dart", 0)

    slots_tries = tries.get("slots", 0)
    dice_tries = tries.get("dice", 0)
    foot_tries = tries.get("foot", 0)
    bowl_tries = tries.get("bowl", 0)
    bask_tries = tries.get("bask", 0)
    dart_tries = tries.get("dart", 0)

    total_tries = slots_tries + dice_tries + foot_tries + bowl_tries + bask_tries + dart_tries
    total_wins = slots_wins + dice_wins + foot_wins + bowl_wins + bask_wins + dart_wins

    await bot.send_message(
        message.chat.id,
        f"""üé∞ *–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ @{username}
        
    ‚≠ê *–í—Å–µ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–æ–≤*: {jackpots}
    ‚úî *–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π*: {total_wins}
    üèÖ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {total_tries}

    üéÆ *–ò–≥—Ä—ã*:
        üé∞ *–°–ª–æ—Ç—ã:* /slot
        üé≤ *–ö—É–±–∏–∫:* /dice
        ‚öΩ *–§—É—Ç–±–æ–ª:* /foot
        üé≥ *–ë–æ—É–ª–∏–Ω–≥:* /bowl
        üèÄ *–ë–∞—Å–∫–µ—Ç–±–æ–ª:* /bask
        üéØ *–î–∞—Ä—Ç—Å:* /dart
        
        *–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤: /rating*
        *–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /reset*
        *–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats*
        *–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ: /congratulate*""",
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

@dp.message_handler(commands=['stats'])
async def full_stats(message: types.Message):
    username = message.from_user.username

    wins = users.get(username, {}).get("wins", {})
    tries = users.get(username, {}).get("tries", {})
    jackpots = users.get(username, {}).get("jackpots", {}).get("slots", 0)

    slots_wins = wins.get("slots", 0)
    dice_wins = wins.get("dice", 0)
    foot_wins = wins.get("foot", 0)
    bowl_wins = wins.get("bowl", 0)
    bask_wins = wins.get("bask", 0)
    dart_wins = wins.get("dart", 0)

    slots_tries = tries.get("slots", 0)
    dice_tries = tries.get("dice", 0)
    foot_tries = tries.get("foot", 0)
    bowl_tries = tries.get("bowl", 0)
    bask_tries = tries.get("bask", 0)
    dart_tries = tries.get("dart", 0)

    total_tries = slots_tries + dice_tries + foot_tries + bowl_tries + bask_tries + dart_tries
    total_wins = slots_wins + dice_wins + foot_wins + bowl_wins + bask_wins + dart_wins

    await bot.send_message(
        message.chat.id,
        f"""üé∞ *–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ @{username}
        
    ‚≠ê *–í—Å–µ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–æ–≤*: {jackpots}
    ‚úî *–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π*: {total_wins}
    üèÖ *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫*: {total_tries}

    üé∞ *–°–ª–æ—Ç—ã:*
            –î–∂–µ–∫–ø–æ—Ç—ã: *{jackpots}*
            –í—ã–∏–≥—Ä—ã—à–∏: *{slots_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{slots_tries}*
    üé≤ *–ö—É–±–∏–∫:*
            –í—ã–∏–≥—Ä—ã—à–∏: *{dice_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{dice_tries}*
    ‚öΩ *–§—É—Ç–±–æ–ª:*
            –í—ã–∏–≥—Ä—ã—à–∏: *{foot_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{foot_tries}*
    üé≥ *–ë–æ—É–ª–∏–Ω–≥:*
            –í—ã–∏–≥—Ä—ã—à–∏: *{bowl_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{bowl_tries}*
    üèÄ *–ë–∞—Å–∫–µ—Ç–±–æ–ª:*
            –í—ã–∏–≥—Ä—ã—à–∏: *{bask_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{bask_tries}*
    üéØ *–î–∞—Ä—Ç—Å:*
            –í—ã–∏–≥—Ä—ã—à–∏: *{dart_wins}*
            –ü–æ–ø—ã—Ç–∫–∏: *{dart_tries}*
        
        *–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /reset*
        *–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /casino*""",
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

@dp.message_handler(commands=['reset'])
async def reset_data(message: types.Message):
    users[message.from_user.username] = {
                "tries": {
                    "slots": 0,
                    "dice": 0,
                    "dart": 0,
                    "bask": 0,
                    "foot": 0,
                    "bowl": 0
                },
                "wins": {
                    "slots": 0,
                    "dice": 0,
                    "dart": 0,
                    "bask": 0,
                    "foot": 0,
                    "bowl": 0
                },
                "jackpots": {
                    "slots": 0
                },
                "congratulate": True
            }
    saveJSON(users, USERDATA)
    print(f'{message.from_user.username} reseted his data')

    await bot.send_message(
        message.chat.id,
        f'‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} —Å–±—Ä–æ—à–µ–Ω–∞',
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

@dp.message_handler(commands=['congratulate'])
async def congratulate(message: types.Message):
    if users.get(message.from_user.username, {}).get("congratulate", True) == True:
        users[message.from_user.username]["congratulate"] = False
    else:
        users[message.from_user.username]["congratulate"] = True
    saveJSON(users, USERDATA)

    await bot.send_message(
        message.chat.id,
        f'‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞*\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, –Ω–æ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n_–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {users.get(message.from_user.username, {}).get("congratulate", True)}_',
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.from_user.username
    await bot.send_message(
        message.chat.id,
        f'üé∞ *–ü–†–ò–í–ï–¢, @{username}*\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /casino',
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

def get_winning_rating():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∏–≥—Ä—ã—à–µ–π."""
    ranking = []
    for username, data in users.items():
        total_wins = sum(data['wins'].values())
        ranking.append((username, total_wins))
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    ranking.sort(key=lambda x: x[1], reverse=True)
    return ranking[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º
def get_attempts_rating():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫."""
    ranking = []
    for username, data in users.items():
        total_attempts = sum(data['tries'].values())
        ranking.append((username, total_attempts))
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    ranking.sort(key=lambda x: x[1], reverse=True)
    return ranking[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤—ã–∏–≥—Ä—ã—à–µ–π
def get_win_ratio_rating():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤—ã–∏–≥—Ä—ã—à–µ–π."""
    ranking = []
    for username, data in users.items():
        total_wins = sum(data['wins'].values())
        total_attempts = sum(data['tries'].values())
        win_ratio = total_wins / total_attempts if total_attempts > 0 else 0
        ranking.append((username, win_ratio))
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    ranking.sort(key=lambda x: x[1], reverse=True)
    return ranking[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∂–µ–∫–ø–æ—Ç–∞–º
def get_jackpot_rating():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∂–µ–∫–ø–æ—Ç–æ–≤."""
    ranking = []
    for username, data in users.items():
        total_jackpots = data['jackpots']['slots']
        ranking.append((username, total_jackpots))
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∂–µ–∫–ø–æ—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    ranking.sort(key=lambda x: x[1], reverse=True)
    return ranking[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def find_user_place(username, sorted_list):
    for index, (name, value) in enumerate(sorted_list, start=1):
        if name == username:
            return index
    return None

@dp.message_handler(commands=['rating'])
async def rating_wins(message: types.Message):
    username = message.from_user.username
    
    win = ""
    attempt = ""
    jackpot = ""
    winrate = ""

    win_rating = sorted(get_winning_rating(), key=lambda x: x[1], reverse=True)
    for index, (name, value) in enumerate(win_rating, start=1):
        win += f"*{index}.* {name} - {value}\n"

    attempts_rating = sorted(get_attempts_rating(), key=lambda x: x[1], reverse=True)
    for index, (name, value) in enumerate(attempts_rating, start=1):
        attempt += f"*{index}.* {name} - {value}\n"

    jackpot_rating = sorted(get_jackpot_rating(), key=lambda x: x[1], reverse=True)
    for index, (name, value) in enumerate(jackpot_rating, start=1):
        jackpot += f"*{index}.* {name} - {value}\n"

    winrate_rating = sorted(get_win_ratio_rating(), key=lambda x: x[1], reverse=True)
    for index, (name, value) in enumerate(winrate_rating, start=1):
        winrate += f"*{index}.* {name} - {round(value, 2)}\n"

    await bot.send_message(
        message.chat.id,
        f'''‚≠ê *–†–ï–ô–¢–ò–ù–ì–ò –ü–û –°–¢–ê–¢–ò–°–¢–ò–ö–ï*

üé∞ *–†–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—ã–∏–≥—Ä—ã—à—É*
    _–í–∞—à–µ –º–µ—Å—Ç–æ: {find_user_place(username, get_winning_rating())}_
{win}
üé∞ *–†–µ–π—Ç–∏–Ω–≥ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º*
    _–í–∞—à–µ –º–µ—Å—Ç–æ: {find_user_place(username, get_attempts_rating())}_
{attempt}
üé∞ *–†–µ–π—Ç–∏–Ω–≥ –ø–æ –¥–∂–µ–∫–ø–æ—Ç–∞–º*
    _–í–∞—à–µ –º–µ—Å—Ç–æ: {find_user_place(username, get_jackpot_rating())}_
{jackpot}
üé∞ *–†–µ–π—Ç–∏–Ω–≥ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É*
    _–í–∞—à–µ –º–µ—Å—Ç–æ: {find_user_place(username, get_win_ratio_rating())}_
{winrate}
*–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /casino*''',
        parse_mode="Markdown",
        message_thread_id=message.message_thread_id
    )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞ –∫–∞–∑–∏–Ω–æ

@dp.message_handler(commands=['dice']) 
async def roll_dice(message: types.Message):
    users[message.from_user.username]["tries"]["dice"] += 1
    data = await bot.send_dice(message.chat.id, emoji='üé≤', message_thread_id=message.message_thread_id)

    print(f"Command /dice received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 1:
        users[message.from_user.username]["wins"]["dice"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    
    saveJSON(users, USERDATA)

@dp.message_handler(commands=['dart'])
async def roll_dart(message: types.Message):
    users[message.from_user.username]["tries"]["dart"] += 1
    data = await bot.send_dice(message.chat.id, emoji='üéØ', message_thread_id=message.message_thread_id)

    print(f"Command /dart received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 6:
        users[message.from_user.username]["wins"]["dart"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    
    saveJSON(users, USERDATA)

@dp.message_handler(commands=['bask']) 
async def roll_basketball(message: types.Message):
    users[message.from_user.username]["tries"]["bask"] += 1
    data = await bot.send_dice(message.chat.id, emoji='üèÄ', message_thread_id=message.message_thread_id)

    print(f"Command /bask received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 5 or data.dice.value == 4:
        users[message.from_user.username]["wins"]["bask"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    
    saveJSON(users, USERDATA)

@dp.message_handler(commands=['foot']) 
async def roll_football(message: types.Message):
    users[message.from_user.username]["tries"]["foot"] += 1
    data = await bot.send_dice(message.chat.id, emoji='‚öΩ', message_thread_id=message.message_thread_id)

    print(f"Command /foot received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 3 or data.dice.value == 5:
        users[message.from_user.username]["wins"]["foot"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    
    saveJSON(users, USERDATA)

@dp.message_handler(commands=['bowl']) 
async def roll_bowling(message: types.Message):
    users[message.from_user.username]["tries"]["bowl"] += 1
    data = await bot.send_dice(message.chat.id, emoji='üé≥', message_thread_id=message.message_thread_id)

    print(f"Command /bowl received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 6:
        users[message.from_user.username]["wins"]["bowl"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)

    saveJSON(users, USERDATA)

@dp.message_handler(commands=['slot']) 
async def roll_slot(message: types.Message):
    users[message.from_user.username]["tries"]["slots"] += 1
    data = await bot.send_dice(message.chat.id, emoji='üé∞', message_thread_id=message.message_thread_id)

    print(f"Command /slot received from {message.from_user.username} with {data.dice.value} result")

    if data.dice.value == 64:
        users[message.from_user.username]["jackpots"]["slots"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–î–∂–µ–∫–ø–æ—Ç!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    if data.dice.value == 1 or data.dice.value == 22 or data.dice.value == 43:
        users[message.from_user.username]["wins"]["slots"] += 1
        if users.get(message.from_user.username, {}).get("congratulate", True) == True:
            time.sleep(1)
            await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    
    saveJSON(users, USERDATA)

@dp.message_handler(content_types=ContentType.DICE)
async def handle_dice(message: types.Message):
    value = message.dice.value
    emoji = message.dice.emoji

    if emoji == 'üé∞':
        users[message.from_user.username]["tries"]["slots"] += 1
        print(f"Slots received from {message.from_user.username} with {value} result")
        #await message.reply(f'–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É: {value}')
        if value == 64:
            users[message.from_user.username]["jackpots"]["slots"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–î–∂–µ–∫–ø–æ—Ç!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
        if value == 1 or value == 22 or value == 43:
            users[message.from_user.username]["wins"]["slots"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    elif emoji == 'üèÄ':
        #await message.reply(f'–í—ã –±—Ä–æ—Å–∏–ª–∏ –º—è—á –≤ –∫–æ—Ä–∑–∏–Ω—É: {value}')
        users[message.from_user.username]["tries"]["bask"] += 1
        print(f"Basketball received from {message.from_user.username} with {value} result")

        if value == 5 or value == 4:
            users[message.from_user.username]["wins"]["bask"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    elif emoji == 'üéØ':
        #await message.reply(f'–í—ã –±—Ä–æ—Å–∏–ª–∏ –¥—Ä–æ—Ç–∏–∫: {value}')
        users[message.from_user.username]["tries"]["dart"] += 1
        print(f"Darts received from {message.from_user.username} with {value} result")

        if value == 6:
            users[message.from_user.username]["wins"]["dart"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    elif emoji == '‚öΩ':
        #await message.reply(f'–í—ã —É–¥–∞—Ä–∏–ª–∏ –ø–æ –º—è—á—É: {value}')
        users[message.from_user.username]["tries"]["foot"] += 1
        print(f"Football received from {message.from_user.username} with {value} result")

        if value == 3 or value == 5:
            users[message.from_user.username]["wins"]["foot"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    elif emoji == 'üé≥':
        #await message.reply(f'–í—ã –±—Ä–æ—Å–∏–ª–∏ —à–∞—Ä –¥–ª—è –±–æ—É–ª–∏–Ω–≥–∞: {value}')
        users[message.from_user.username]["tries"]["bowl"] += 1
        print(f"Bowling received from {message.from_user.username} with {value} result")

        if value == 6:
            users[message.from_user.username]["wins"]["bowl"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    elif emoji == 'üé≤':
        #await message.reply(f'–í—ã –≤—ã–±–∏—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫: {value}')
        users[message.from_user.username]["tries"]["dice"] += 1
        print(f"Dice cube received from {message.from_user.username} with {value} result")

        if value == 1:
            users[message.from_user.username]["wins"]["dice"] += 1
            if users.get(message.from_user.username, {}).get("congratulate", True) == True:
                time.sleep(1)
                await bot.send_message(message.chat.id, f'ü§ë *–í—ã–∏–≥—Ä—ã—à!* –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º.', parse_mode="Markdown", message_thread_id=message.message_thread_id)
    else:
        await message.reply(f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–º–æ–¥–∑–∏: {value}')
    
    saveJSON(users, USERDATA)

original_print = print
def custom_print(*args, **kwargs):
    original_print(*args, **kwargs)
    message = ' '.join(map(str, args))
    logging.info(message)
print = custom_print

if __name__ == '__main__':
    print('Bot is starting...')
    executor.start_polling(dp, skip_updates=True)
